{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "iFSbTZV8TkRk"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = pd.read_csv('/content/sample_data/mission 4.csv')"
      ],
      "metadata": {
        "id": "rV-uLM3z8lAK"
      },
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Xp_apLzY8sc8",
        "outputId": "ed02aadb-b2cc-4905-db87-c7e6a2ad7c39"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Brand Processor Type  RAM Size (GB)  Storage (GB)  Screen Size (inches)  \\\n",
              "0    Acer  Intel Core i5             16           256                  17.3   \n",
              "1    Acer  Intel Core i7             32          2048                  13.3   \n",
              "2   Apple    AMD Ryzen 5             32           512                  17.3   \n",
              "3      HP    AMD Ryzen 5              8           512                  15.6   \n",
              "4  Lenovo    AMD Ryzen 7             64           256                  17.3   \n",
              "\n",
              "  Operating System    Price ($)  \n",
              "0            macOS  1808.865225  \n",
              "1            macOS  2020.923055  \n",
              "2            Linux  1152.453189  \n",
              "3            macOS  1884.457406  \n",
              "4            macOS  2780.779164  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f15d7edc-d05e-495c-8539-c17c28be544b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Brand</th>\n",
              "      <th>Processor Type</th>\n",
              "      <th>RAM Size (GB)</th>\n",
              "      <th>Storage (GB)</th>\n",
              "      <th>Screen Size (inches)</th>\n",
              "      <th>Operating System</th>\n",
              "      <th>Price ($)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Acer</td>\n",
              "      <td>Intel Core i5</td>\n",
              "      <td>16</td>\n",
              "      <td>256</td>\n",
              "      <td>17.3</td>\n",
              "      <td>macOS</td>\n",
              "      <td>1808.865225</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Acer</td>\n",
              "      <td>Intel Core i7</td>\n",
              "      <td>32</td>\n",
              "      <td>2048</td>\n",
              "      <td>13.3</td>\n",
              "      <td>macOS</td>\n",
              "      <td>2020.923055</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Apple</td>\n",
              "      <td>AMD Ryzen 5</td>\n",
              "      <td>32</td>\n",
              "      <td>512</td>\n",
              "      <td>17.3</td>\n",
              "      <td>Linux</td>\n",
              "      <td>1152.453189</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>HP</td>\n",
              "      <td>AMD Ryzen 5</td>\n",
              "      <td>8</td>\n",
              "      <td>512</td>\n",
              "      <td>15.6</td>\n",
              "      <td>macOS</td>\n",
              "      <td>1884.457406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Lenovo</td>\n",
              "      <td>AMD Ryzen 7</td>\n",
              "      <td>64</td>\n",
              "      <td>256</td>\n",
              "      <td>17.3</td>\n",
              "      <td>macOS</td>\n",
              "      <td>2780.779164</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f15d7edc-d05e-495c-8539-c17c28be544b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f15d7edc-d05e-495c-8539-c17c28be544b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f15d7edc-d05e-495c-8539-c17c28be544b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bf7ce573-4b31-4116-b1a6-b1e0cfa48bb2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bf7ce573-4b31-4116-b1a6-b1e0cfa48bb2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bf7ce573-4b31-4116-b1a6-b1e0cfa48bb2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Apple\",\n          \"Dell\",\n          \"HP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Processor Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Intel Core i7\",\n          \"AMD Ryzen 7\",\n          \"Intel Core i5\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RAM Size (GB)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21,\n        \"min\": 8,\n        \"max\": 64,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          32,\n          64,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Storage (GB)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 705,\n        \"min\": 256,\n        \"max\": 2048,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2048,\n          1024,\n          256\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Screen Size (inches)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.563319377951116,\n        \"min\": 13.3,\n        \"max\": 17.3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          13.3,\n          14.0,\n          17.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Operating System\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"macOS\",\n          \"Linux\",\n          \"Windows\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price ($)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 671.3895278610086,\n        \"min\": 389.80824663928905,\n        \"max\": 3117.21089558675,\n        \"num_unique_values\": 996,\n        \"samples\": [\n          1848.0,\n          2241.624431771168,\n          1250.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "QnX8NuAJ8uMh",
        "outputId": "d06f16e4-7ff3-4dd0-8cab-26a790620ec7"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Brand                   0\n",
              "Processor Type          0\n",
              "RAM Size (GB)           0\n",
              "Storage (GB)            0\n",
              "Screen Size (inches)    0\n",
              "Operating System        0\n",
              "Price ($)               0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Brand</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Processor Type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RAM Size (GB)</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Storage (GB)</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Screen Size (inches)</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Operating System</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Price ($)</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sru_oFqG86nP",
        "outputId": "e74ce992-46f4-412c-d0c9-529c55fced6e"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Brand', 'Processor Type', 'RAM Size (GB)', 'Storage (GB)',\n",
              "       'Screen Size (inches)', 'Operating System', 'Price ($)'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "encode_cols = ['Brand', 'Processor Type', 'Operating System']\n",
        "le = {}\n",
        "for col in encode_cols:\n",
        "  le[col] = LabelEncoder()\n",
        "  data[col] = le[col].fit_transform(data[col])\n"
      ],
      "metadata": {
        "id": "2GDX3TxmPmyp"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "n6Fr_w59P_aY",
        "outputId": "f07efe6f-58b9-4117-fb1c-e0f9ae56b0db"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Brand  Processor Type  RAM Size (GB)  Storage (GB)  Screen Size (inches)  \\\n",
              "0      0               2             16           256                  17.3   \n",
              "1      0               3             32          2048                  13.3   \n",
              "2      1               0             32           512                  17.3   \n",
              "3      3               0              8           512                  15.6   \n",
              "4      4               1             64           256                  17.3   \n",
              "\n",
              "   Operating System    Price ($)  \n",
              "0                 2  1808.865225  \n",
              "1                 2  2020.923055  \n",
              "2                 0  1152.453189  \n",
              "3                 2  1884.457406  \n",
              "4                 2  2780.779164  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-870dd9e6-0b93-4e62-8d7c-316cda1f5081\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Brand</th>\n",
              "      <th>Processor Type</th>\n",
              "      <th>RAM Size (GB)</th>\n",
              "      <th>Storage (GB)</th>\n",
              "      <th>Screen Size (inches)</th>\n",
              "      <th>Operating System</th>\n",
              "      <th>Price ($)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>16</td>\n",
              "      <td>256</td>\n",
              "      <td>17.3</td>\n",
              "      <td>2</td>\n",
              "      <td>1808.865225</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>32</td>\n",
              "      <td>2048</td>\n",
              "      <td>13.3</td>\n",
              "      <td>2</td>\n",
              "      <td>2020.923055</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>32</td>\n",
              "      <td>512</td>\n",
              "      <td>17.3</td>\n",
              "      <td>0</td>\n",
              "      <td>1152.453189</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>8</td>\n",
              "      <td>512</td>\n",
              "      <td>15.6</td>\n",
              "      <td>2</td>\n",
              "      <td>1884.457406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>64</td>\n",
              "      <td>256</td>\n",
              "      <td>17.3</td>\n",
              "      <td>2</td>\n",
              "      <td>2780.779164</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-870dd9e6-0b93-4e62-8d7c-316cda1f5081')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-870dd9e6-0b93-4e62-8d7c-316cda1f5081 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-870dd9e6-0b93-4e62-8d7c-316cda1f5081');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-55d383c8-75f5-4c4b-90f6-d769eecabfbf\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-55d383c8-75f5-4c4b-90f6-d769eecabfbf')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-55d383c8-75f5-4c4b-90f6-d769eecabfbf button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Processor Type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RAM Size (GB)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21,\n        \"min\": 8,\n        \"max\": 64,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          32,\n          64,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Storage (GB)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 705,\n        \"min\": 256,\n        \"max\": 2048,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2048,\n          1024,\n          256\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Screen Size (inches)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.563319377951116,\n        \"min\": 13.3,\n        \"max\": 17.3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          13.3,\n          14.0,\n          17.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Operating System\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price ($)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 671.3895278610086,\n        \"min\": 389.80824663928905,\n        \"max\": 3117.21089558675,\n        \"num_unique_values\": 996,\n        \"samples\": [\n          1848.0,\n          2241.624431771168,\n          1250.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "scale_Cols = ['RAM Size (GB)', 'Storage (GB)', 'Screen Size (inches)']\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "scaler = StandardScaler()\n",
        "data[scale_Cols] = scaler.fit_transform(data[scale_Cols])"
      ],
      "metadata": {
        "id": "rUpkjqjyQmhd"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "24DOcnbvRFBr",
        "outputId": "24eaa203-f1d4-4484-d953-0776c77c7d57"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Brand  Processor Type  RAM Size (GB)  Storage (GB)  Screen Size (inches)  \\\n",
              "0      0               2      -0.653598     -1.023895              1.413918   \n",
              "1      0               3       0.083266      1.515887             -1.146020   \n",
              "2      1               0       0.083266     -0.661069              1.413918   \n",
              "3      3               0      -1.022029     -0.661069              0.325944   \n",
              "4      4               1       1.556992     -1.023895              1.413918   \n",
              "\n",
              "   Operating System    Price ($)  \n",
              "0                 2  1808.865225  \n",
              "1                 2  2020.923055  \n",
              "2                 0  1152.453189  \n",
              "3                 2  1884.457406  \n",
              "4                 2  2780.779164  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-89918ec9-bd74-471c-bd5e-f25fe7298f9e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Brand</th>\n",
              "      <th>Processor Type</th>\n",
              "      <th>RAM Size (GB)</th>\n",
              "      <th>Storage (GB)</th>\n",
              "      <th>Screen Size (inches)</th>\n",
              "      <th>Operating System</th>\n",
              "      <th>Price ($)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>-0.653598</td>\n",
              "      <td>-1.023895</td>\n",
              "      <td>1.413918</td>\n",
              "      <td>2</td>\n",
              "      <td>1808.865225</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0.083266</td>\n",
              "      <td>1.515887</td>\n",
              "      <td>-1.146020</td>\n",
              "      <td>2</td>\n",
              "      <td>2020.923055</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.083266</td>\n",
              "      <td>-0.661069</td>\n",
              "      <td>1.413918</td>\n",
              "      <td>0</td>\n",
              "      <td>1152.453189</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>-1.022029</td>\n",
              "      <td>-0.661069</td>\n",
              "      <td>0.325944</td>\n",
              "      <td>2</td>\n",
              "      <td>1884.457406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>1.556992</td>\n",
              "      <td>-1.023895</td>\n",
              "      <td>1.413918</td>\n",
              "      <td>2</td>\n",
              "      <td>2780.779164</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89918ec9-bd74-471c-bd5e-f25fe7298f9e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-89918ec9-bd74-471c-bd5e-f25fe7298f9e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-89918ec9-bd74-471c-bd5e-f25fe7298f9e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-979733fa-5283-40d9-93f4-c8b390cbd58d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-979733fa-5283-40d9-93f4-c8b390cbd58d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-979733fa-5283-40d9-93f4-c8b390cbd58d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 1000,\n  \"fields\": [\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1,\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Processor Type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          1,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RAM Size (GB)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0005003753127737,\n        \"min\": -1.0220293363434265,\n        \"max\": 1.5569920603414997,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.08326554795011333,\n          1.5569920603414997,\n          -0.65359770824558\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Storage (GB)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0005003753127728,\n        \"min\": -1.0238951788433936,\n        \"max\": 1.51588733423377,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.51588733423377,\n          0.06458304104681928,\n          -1.0238951788433936\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Screen Size (inches)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000500375312773,\n        \"min\": -1.1460204788228503,\n        \"max\": 1.413918045380759,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -1.1460204788228503,\n          -0.6980312370872191,\n          1.413918045380759\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Operating System\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price ($)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 671.3895278610086,\n        \"min\": 389.80824663928905,\n        \"max\": 3117.21089558675,\n        \"num_unique_values\": 996,\n        \"samples\": [\n          1848.0,\n          2241.624431771168,\n          1250.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "2IDWUVd0RGOc",
        "outputId": "aaad3612-d180-4657-e38c-677202b7c484"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Brand  Processor Type  RAM Size (GB)  Storage (GB)  \\\n",
              "count  1000.00000     1000.000000   1.000000e+03  1.000000e+03   \n",
              "mean      1.89000        1.340000  -3.197442e-17 -2.042810e-17   \n",
              "std       1.36373        1.116085   1.000500e+00  1.000500e+00   \n",
              "min       0.00000        0.000000  -1.022029e+00 -1.023895e+00   \n",
              "25%       1.00000        0.000000  -7.457056e-01 -6.610691e-01   \n",
              "50%       2.00000        1.000000  -6.535977e-01 -6.610691e-01   \n",
              "75%       3.00000        2.000000   1.556992e+00  1.515887e+00   \n",
              "max       4.00000        3.000000   1.556992e+00  1.515887e+00   \n",
              "\n",
              "       Screen Size (inches)  Operating System    Price ($)  \n",
              "count          1.000000e+03       1000.000000  1000.000000  \n",
              "mean           1.945111e-16          1.120000  1752.871053  \n",
              "std            1.000500e+00          0.816251   671.389528  \n",
              "min           -1.146020e+00          0.000000   389.808247  \n",
              "25%           -1.146020e+00          0.000000  1233.948071  \n",
              "50%            3.259442e-01          1.000000  1738.449367  \n",
              "75%            1.413918e+00          2.000000  2215.303742  \n",
              "max            1.413918e+00          2.000000  3117.210896  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8e62bf7e-71fa-4478-b1ee-966e6c6faddd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Brand</th>\n",
              "      <th>Processor Type</th>\n",
              "      <th>RAM Size (GB)</th>\n",
              "      <th>Storage (GB)</th>\n",
              "      <th>Screen Size (inches)</th>\n",
              "      <th>Operating System</th>\n",
              "      <th>Price ($)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1000.00000</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1.000000e+03</td>\n",
              "      <td>1.000000e+03</td>\n",
              "      <td>1.000000e+03</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>1.89000</td>\n",
              "      <td>1.340000</td>\n",
              "      <td>-3.197442e-17</td>\n",
              "      <td>-2.042810e-17</td>\n",
              "      <td>1.945111e-16</td>\n",
              "      <td>1.120000</td>\n",
              "      <td>1752.871053</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.36373</td>\n",
              "      <td>1.116085</td>\n",
              "      <td>1.000500e+00</td>\n",
              "      <td>1.000500e+00</td>\n",
              "      <td>1.000500e+00</td>\n",
              "      <td>0.816251</td>\n",
              "      <td>671.389528</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-1.022029e+00</td>\n",
              "      <td>-1.023895e+00</td>\n",
              "      <td>-1.146020e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>389.808247</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.00000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-7.457056e-01</td>\n",
              "      <td>-6.610691e-01</td>\n",
              "      <td>-1.146020e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1233.948071</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2.00000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-6.535977e-01</td>\n",
              "      <td>-6.610691e-01</td>\n",
              "      <td>3.259442e-01</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1738.449367</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>3.00000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>1.556992e+00</td>\n",
              "      <td>1.515887e+00</td>\n",
              "      <td>1.413918e+00</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>2215.303742</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>4.00000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.556992e+00</td>\n",
              "      <td>1.515887e+00</td>\n",
              "      <td>1.413918e+00</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>3117.210896</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e62bf7e-71fa-4478-b1ee-966e6c6faddd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8e62bf7e-71fa-4478-b1ee-966e6c6faddd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8e62bf7e-71fa-4478-b1ee-966e6c6faddd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f55071ce-34bd-4ca1-9edf-6120501609e0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f55071ce-34bd-4ca1-9edf-6120501609e0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f55071ce-34bd-4ca1-9edf-6120501609e0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 352.88606855612124,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.89,\n          2.0,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Processor Type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.1276745705377,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1000.0,\n          1.34,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RAM Size (GB)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.46938258111436,\n        \"min\": -1.0220293363434265,\n        \"max\": 1000.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1000.0,\n          -3.1974423109204506e-17,\n          -0.65359770824558\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Storage (GB)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.4696599176427,\n        \"min\": -1.0238951788433936,\n        \"max\": 1000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1000.0,\n          -2.042810365310288e-17,\n          1.51588733423377\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Screen Size (inches)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.4607957413229,\n        \"min\": -1.1460204788228503,\n        \"max\": 1000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1000.0,\n          1.9451107391432743e-16,\n          1.413918045380759\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Operating System\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 353.20387554113324,\n        \"min\": 0.0,\n        \"max\": 1000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          1000.0,\n          1.12,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Price ($)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 885.273768032538,\n        \"min\": 389.80824663928905,\n        \"max\": 3117.21089558675,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1752.8710533773103,\n          1738.4493669364324,\n          1000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10, 8))\n",
        "sns.histplot(data['Price ($)'], kde=True, color=\"red\")\n",
        "plt.xlabel('Price ($)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Distribution of Laptop Prices')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 718
        },
        "id": "dJH9fr_JRLEo",
        "outputId": "9b25ef05-e386-4f2f-d56a-0a085aba2a8c"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,8))\n",
        "sns.scatterplot(x=data['RAM Size (GB)'], y=data['Price ($)'], color='Blue')\n",
        "plt.xlabel('Ram')\n",
        "plt.ylabel('Price')\n",
        "plt.title('RAM and Price Relationship')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 736
        },
        "id": "U_JLofqARc7B",
        "outputId": "38ad1cf3-c80c-40f2-9eec-dadb5190c29d"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'RAM and Price Relationship')"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,8))\n",
        "sns.barplot(x=data['Brand'], y=data['Price ($)'], color='Green')\n",
        "plt.xlabel('Brand')\n",
        "plt.ylabel('Price')\n",
        "plt.title('Brand Impact on Price ')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 736
        },
        "id": "ENold2gVSDgC",
        "outputId": "63151efe-9366-4dd0-d0f6-c62f6705e9aa"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Brand Impact on Price ')"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA1sAAAK9CAYAAADSVnYuAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAARPlJREFUeJzt3XuclnWB///3AM5wEAZBYZgVkTAPKAdFJUoNkkAk09V28wyKYi7oKq0pmyHarpiWaWZmBw+lptlXcdNSUPOwiSf84llSw3C/MmCpjEzKae7fH/241wk8gFwMA8/n43E/HnNd1+e+7s813rvLa6/DVJRKpVIAAABYr1o19wQAAAA2RWILAACgAGILAACgAGILAACgAGILAACgAGILAACgAGILAACgAGILAACgAGILAACgAGILgA1m7Nix2X777Zt7GqwHU6dOTUVFRXNPA2CjJrYAWqhrrrkmFRUVTV7dunXLsGHD8tvf/ra5p/exDB06NLvttltzT2O9OP/88zN9+vTmnkYT9913X5PvzRZbbJFPfOITOfbYY/PHP/6xuacHsMkQWwAt3HnnnZef//zn+dnPfpavfe1ref3113PggQfm9ttvb+6pkY0ztlY59dRT8/Of/zw/+tGPMnr06Nx0003Za6+98tprr33oe88+++y88847G2CWAC1Xm+aeAAAfz6hRo7LnnnuWl8eNG5fu3bvnF7/4Rb7whS+87/tWrFiRxsbGVFZWbohpshHad99986UvfSlJctxxx2XHHXfMqaeemmuvvTaTJ09e43saGhrSoUOHtGnTJm3a+GcEwAdxZgtgE9O5c+e0a9euyT+EX3nllVRUVOTb3/52LrnkkvTp0ydVVVV57rnnsmzZskyZMiWDBg1KdXV1OnTokH333Te/+93vmuz3vfv40Y9+VN7HXnvtlccee2y1eUyfPj277bZb2rZtm9122y233nrrxzquioqKTJw4MTfffHP69u2bdu3aZciQIXn66aeTJFdeeWV22GGHtG3bNkOHDs0rr7zS5P2rLk2cPXt2Pv3pT6ddu3bp3bt3fvjDHzYZ91F/H0nS2NiYSy+9NP369Uvbtm2zzTbb5IADDsjjjz9ennNDQ0Ouvfba8iV7Y8eO/cDjXLRoUTmY27ZtmwEDBuTaa69tMmZt/1t8VJ/73OeSJPPmzUvyv/dlPffccznyyCOz1VZbZZ999mmy7e9dd9112XvvvdO+fftstdVW2W+//TJjxowmY377299m3333TYcOHdKxY8eMHj06zz777DrPG2Bj5f8lBdDCLV68OH/+859TKpWyaNGiXHbZZVmyZEmOPvro1cZeffXVeffddzN+/PhUVVWlS5cuqa+vz09+8pMcccQROfHEE/P222/npz/9aUaOHJlHH300AwcObLKPG264IW+//XZOOumkVFRU5MILL8yhhx6aP/7xj9liiy2SJDNmzMhhhx2Wvn37Ztq0afnLX/6S4447Lttuu+3HOtYHH3ww//Vf/5UJEyYkSaZNm5YvfOEL+drXvpYf/OAH+Zd/+Ze8+eabufDCC3P88cfn3nvvbfL+N998MwceeGD++Z//OUcccUR++ctf5uSTT05lZWWOP/74JFmr38e4ceNyzTXXZNSoUTnhhBOyYsWKPPjgg3n44Yez55575uc//3lOOOGE7L333hk/fnySpE+fPu97fO+8806GDh2al156KRMnTkzv3r1z8803Z+zYsXnrrbfyr//6r2v932JtvPzyy0mSrl27Nln/T//0T/nkJz+Z888/P6VS6X3ff+6552bq1Kn59Kc/nfPOOy+VlZV55JFHcu+992bEiBFJkp///OcZM2ZMRo4cmW9961v561//miuuuCL77LNP/u///b8eoAJsWkoAtEhXX311Kclqr6qqqtI111zTZOy8efNKSUqdOnUqLVq0qMm2FStWlJYuXdpk3Ztvvlnq3r176fjjj19tH127di298cYb5fW33XZbKUnp17/+dXndwIEDSz169Ci99dZb5XUzZswoJSn16tXrQ4/ts5/9bGnXXXdtsm7Vsc2bN6+87sorrywlKdXU1JTq6+vL6ydPnlxK0mTsZz/72VKS0ne+853yuqVLl5YGDhxY6tatW2nZsmVr9fu49957S0lKp5566mrzb2xsLP/coUOH0pgxYz70mEulUumSSy4pJSldd9115XXLli0rDRkypLTllluWj3Ft/lusye9+97tSktJVV11Vev3110uvvfZa6Y477ihtv/32pYqKitJjjz1WKpVKpXPOOaeUpHTEEUesto9V21Z58cUXS61atSr94z/+Y2nlypVr/H28/fbbpc6dO5dOPPHEJtvr6upK1dXVq60HaOlcRgjQwl1++eWZOXNmZs6cmeuuuy7Dhg3LCSeckFtuuWW1sYcddli22WabJutat25dvm+rsbExb7zxRlasWJE999wzTzzxxGr7+PKXv5ytttqqvLzvvvsmSfkpdgsWLMicOXMyZsyYVFdXl8d9/vOfT9++fT/Wse6///5NznwMHjy4fFwdO3Zcbf3fP1mvTZs2Oemkk8rLlZWVOemkk7Jo0aLMnj07yUf/ffyf//N/UlFRkXPOOWe1ea7rI9F/85vfpKamJkcccUR53RZbbJFTTz01S5Ysyf33399k/If9t/gwxx9/fLbZZpvU1tZm9OjR5Use33sPYJJ85Stf+dB9TZ8+PY2NjZkyZUpatWr6z4tVv4+ZM2fmrbfeyhFHHJE///nP5Vfr1q0zePDgNV6qCdCSuYwQoIXbe++9m/zj+Igjjsjuu++eiRMn5gtf+EKTB2D07t17jfu49tpr853vfCcvvPBCli9f/oHjt9tuuybLq/6x/+abbyZJ/vSnPyVJPvnJT6723p122mmNAfdR/f1nr4q5nj17rnH9qjmtUltbmw4dOjRZt+OOOyb5231Qn/rUp5J8tN/Hyy+/nNra2nTp0mWdj+fv/elPf8onP/nJ1WJll112KW9/rw/7b/FhpkyZkn333TetW7fO1ltvnV122WWND714v+/Ne7388stp1arVBwb1iy++mOR/7w37e506dfpI8wZoKcQWwCamVatWGTZsWC699NK8+OKL2XXXXcvb2rVrt9r46667LmPHjs0hhxySM844I926dUvr1q0zbdq08j0879W6des1fm7pA+7lWV/e77PX55zW9vfRnD7ucffr1y/Dhw//0HFr+t6si8bGxiR/u2+rpqZmte2ebghsavxvNYBN0IoVK5IkS5Ys+dCxv/rVr/KJT3wit9xyS5PL39Z0edxH0atXryT/exbjvebOnbtO+1xfXnvttfKjy1f5wx/+kCTlyxM/6u+jT58+ueuuu/LGG2984NmttbmksFevXnnqqafS2NjY5OzWCy+8UN6+serTp08aGxvz3HPPrfZQlfeOSZJu3bp9pMgDaOncswWwiVm+fHlmzJiRysrK8uVnH2TV2ZH3ng155JFHMmvWrHX6/B49emTgwIG59tprs3jx4vL6mTNn5rnnnlunfa4vK1asyJVXXlleXrZsWa688spss802GTRoUJKP/vs47LDDUiqVcu655672Oe99b4cOHfLWW299pPkdeOCBqaury0033dRkzpdddlm23HLLfPazn/1I+2kOhxxySFq1apXzzjuvfAZrlVW/j5EjR6ZTp045//zzm1yeucrrr7++QeYKsKE4swXQwv32t78tn/lYtGhRbrjhhrz44os566yzPtI9MF/4whdyyy235B//8R8zevTozJs3Lz/84Q/Tt2/fj3RmbE2mTZuW0aNHZ5999snxxx+fN954I5dddll23XXXdd7n+lBbW5tvfetbeeWVV7Ljjjvmpptuypw5c/KjH/2o/Kj0j/r7GDZsWI455ph873vfy4svvpgDDjggjY2NefDBBzNs2LBMnDgxSTJo0KDcfffdufjii1NbW5vevXuXH+Dx98aPH58rr7wyY8eOzezZs7P99tvnV7/6VX7/+9/nkksuafIQkI3NDjvskK9//ev55je/mX333TeHHnpoqqqq8thjj6W2tjbTpk1Lp06dcsUVV+SYY47JHnvskcMPPzzbbLNN5s+fnzvuuCOf+cxn8v3vf7+5DwVgvRFbAC3clClTyj+3bds2O++8c6644oomT937IGPHjk1dXV2uvPLK3HXXXenbt2+uu+663HzzzbnvvvvWaU4HHHBAbr755px99tmZPHly+vTpk6uvvjq33XbbOu9zfdhqq61y7bXX5pRTTsmPf/zjdO/ePd///vdz4oknlsesze/j6quvTv/+/fPTn/40Z5xxRqqrq7Pnnnvm05/+dHnMxRdfnPHjx+fss8/OO++8kzFjxrxvbLVr1y733XdfzjrrrFx77bWpr6/PTjvtlKuvvvpD/xjyxuC8885L7969c9lll+XrX/962rdvn/79++eYY44pjznyyCNTW1ubCy64IBdddFGWLl2af/iHf8i+++6b4447rhlnD7D+VZQ2xB3NANDMhg4dmj//+c955plnmnsqAGwm3LMFAABQALEFAABQALEFAABQAPdsAQAAFMCZLQAAgAKILQAAgAL4O1sfQWNjY1577bV07NgxFRUVzT0dAACgmZRKpbz99tupra1Nq1YffO5KbH0Er732Wnr27Nnc0wAAADYSr776arbddtsPHCO2PoKOHTsm+dsvtFOnTs08GwAAoLnU19enZ8+e5Ub4IGLrI1h16WCnTp3EFgAA8JFuL/KADAAAgAKILQAAgAKILQAAgAKILQAAgAI0a2xNmzYte+21Vzp27Jhu3brlkEMOydy5c5uMeffddzNhwoR07do1W265ZQ477LAsXLiwyZj58+dn9OjRad++fbp165YzzjgjK1asaDLmvvvuyx577JGqqqrssMMOueaaa4o+PAAAYDPWrLF1//33Z8KECXn44Yczc+bMLF++PCNGjEhDQ0N5zOmnn55f//rXufnmm3P//ffntddey6GHHlrevnLlyowePTrLli3LQw89lGuvvTbXXHNNpkyZUh4zb968jB49OsOGDcucOXNy2mmn5YQTTshdd921QY8XAADYfFSUSqVSc09ilddffz3dunXL/fffn/322y+LFy/ONttskxtuuCFf+tKXkiQvvPBCdtlll8yaNSuf+tSn8tvf/jZf+MIX8tprr6V79+5Jkh/+8Ic588wz8/rrr6eysjJnnnlm7rjjjjzzzDPlzzr88MPz1ltv5c477/zQedXX16e6ujqLFy/26HcAANiMrU0bbFT3bC1evDhJ0qVLlyTJ7Nmzs3z58gwfPrw8Zuedd852222XWbNmJUlmzZqVfv36lUMrSUaOHJn6+vo8++yz5THv3ceqMav28feWLl2a+vr6Ji8AAIC1sdHEVmNjY0477bR85jOfyW677ZYkqaurS2VlZTp37txkbPfu3VNXV1ce897QWrV91bYPGlNfX5933nlntblMmzYt1dXV5VfPnj3XyzECAACbj40mtiZMmJBnnnkmN954Y3NPJZMnT87ixYvLr1dffbW5pwQAALQwbZp7AkkyceLE3H777XnggQey7bbbltfX1NRk2bJleeutt5qc3Vq4cGFqamrKYx599NEm+1v1tML3jvn7JxguXLgwnTp1Srt27VabT1VVVaqqqtbLsQEAAJunZj2zVSqVMnHixNx66625995707t37ybbBw0alC222CL33HNPed3cuXMzf/78DBkyJEkyZMiQPP3001m0aFF5zMyZM9OpU6f07du3POa9+1g1ZtU+AAAA1rdmfRrhv/zLv+SGG27Ibbfdlp122qm8vrq6unzG6eSTT85vfvObXHPNNenUqVNOOeWUJMlDDz2U5G+Pfh84cGBqa2tz4YUXpq6uLsccc0xOOOGEnH/++Un+9uj33XbbLRMmTMjxxx+fe++9N6eeemruuOOOjBw58kPn6WmEAABAsnZt0KyxVVFRscb1V199dcaOHZvkb3/U+Ktf/Wp+8YtfZOnSpRk5cmR+8IMflC8RTJI//elPOfnkk3PfffelQ4cOGTNmTC644IK0afO/V0ned999Of300/Pcc89l2223zTe+8Y3yZ3wYsQUAACQtKLZaCrEFAAAkLfjvbAEAAGwqxBYAAEABxBYAAEABxBYAAEABxBYAAEABxBYAAEABxBYAAEABxBYAAEABxBYAAEAB2jT3BAAAgA2vVCqloaGhvNyhQ4dUVFQ044w2PWILAAA2Qw0NDTn44IPLy7fddlu23HLLZpzRpsdlhAAAAAUQWwAAAAUQWwAAAAUQWwAAAAUQWwAAAAUQWwAAAAUQWwAAAAUQWwAAAAUQWwAAAAUQWwAAAAUQWwAAAAUQWwAAAAVo09wTAPg4SqVSGhoayssdOnRIRUVFM84IAOBvxBbQojU0NOTggw8uL992223Zcsstm3FGAAB/4zJCAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAArRp7gkAAPC/SqVSGhoayssdOnRIRUVFM85o87HV6Vs19xQ2qNYrW2dABpSXt//37bOy9cpmnNGG9eZ33yz8M8QWAMBGpKGhIQcffHB5+bbbbsuWW27ZjDMC1pXLCAEAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAArQprknAKxfW52+VXNPYYNqvbJ1BmRAeXn7f98+K1uvbMYZbVhvfvfN5p4CAPA+nNkCAAAogNgCAAAogNgCAAAogHu2KESpVEpDQ0N5uUOHDqmoqGjGGQEAwIYltihEQ0NDDj744PLybbfdli233LIZZwQAABuWywgBAAAKILYAAAAKILYAAAAKILYAAAAKILYAAAAKILYAAAAKILYAAAAK0Kyx9cADD+Sggw5KbW1tKioqMn369CbbKyoq1vi66KKLymO233771bZfcMEFTfbz1FNPZd99903btm3Ts2fPXHjhhRvi8AAAgM1Ys8ZWQ0NDBgwYkMsvv3yN2xcsWNDkddVVV6WioiKHHXZYk3HnnXdek3GnnHJKeVt9fX1GjBiRXr16Zfbs2bnooosyderU/OhHPyr02AAAgM1bm+b88FGjRmXUqFHvu72mpqbJ8m233ZZhw4blE5/4RJP1HTt2XG3sKtdff32WLVuWq666KpWVldl1110zZ86cXHzxxRk/fvzHPwgANgulUikNDQ3l5Q4dOqSioqIZZwTAxq7F3LO1cOHC3HHHHRk3btxq2y644IJ07do1u+++ey666KKsWLGivG3WrFnZb7/9UllZWV43cuTIzJ07N2+++eYaP2vp0qWpr69v8gJg89bQ0JCDDz64/HpveAHAmjTrma21ce2116Zjx4459NBDm6w/9dRTs8cee6RLly556KGHMnny5CxYsCAXX3xxkqSuri69e/du8p7u3buXt2211Varfda0adNy7rnnFnQkAMDa2Or01f9v9aas9crWGZAB5eXt/337rGy9shlntGG9+d01/z/DoSVqMbF11VVX5aijjkrbtm2brJ80aVL55/79+6eysjInnXRSpk2blqqqqnX6rMmTJzfZb319fXr27LluEwcAADZLLSK2HnzwwcydOzc33XTTh44dPHhwVqxYkVdeeSU77bRTampqsnDhwiZjVi2/331eVVVV6xxqAADQEqxstTJP7vpkk2XWrxZxz9ZPf/rTDBo0KAMGDPjQsXPmzEmrVq3SrVu3JMmQIUPywAMPZPny5eUxM2fOzE477bTGSwgBAGCzUJGsbL2y/Ipn/qx3zRpbS5YsyZw5czJnzpwkybx58zJnzpzMnz+/PKa+vj4333xzTjjhhNXeP2vWrFxyySV58skn88c//jHXX399Tj/99Bx99NHlkDryyCNTWVmZcePG5dlnn81NN92USy+9tMllggAAAOtbs15G+Pjjj2fYsGHl5VUBNGbMmFxzzTVJkhtvvDGlUilHHHHEau+vqqrKjTfemKlTp2bp0qXp3bt3Tj/99CYhVV1dnRkzZmTChAkZNGhQtt5660yZMsVj3wEAgEI1a2wNHTo0pVLpA8eMHz/+fcNojz32yMMPP/yhn9O/f/88+OCD6zRHAACAddEi7tkCAABoacQWAABAAcQWAABAAVrE39kCeD/+RggAsLESW0DL9v//jRAAgI2NywgBAAAK4MzWBrLV6Vs19xQ2qNYrW2dABpSXt//37Tersw9vfvfN5p4CAADNzJktAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAAogtAACAArRp7gkA0DJtdfpWzT2FDar1ytYZkAHl5e3/ffusbL2yGWe0Yb353TebewoALY4zWwAAAAVwZgsAYCOystXKPLnrk02WgZZJbAEAbEwqslldogqbMpcRAgAAFEBsAQAAFEBsAQAAFEBsAQAAFEBsAQAAFMDTCCmEx9YCALC5E1sUw2NrAQDYzLmMEAAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABtmnsCANASrGy1Mk/u+mSTZQD4IGILAD6KimRla4EFwEfnMkIAAIACiC0AAIACiC0AAIACiC0AAIACiC0AAIACiC0AAIACiC0AAIACiC0AAIACiC0AAIACNGtsPfDAAznooINSW1ubioqKTJ8+vcn2sWPHpqKiosnrgAMOaDLmjTfeyFFHHZVOnTqlc+fOGTduXJYsWdJkzFNPPZV99903bdu2Tc+ePXPhhRcWfWgAAMBmrlljq6GhIQMGDMjll1/+vmMOOOCALFiwoPz6xS9+0WT7UUcdlWeffTYzZ87M7bffngceeCDjx48vb6+vr8+IESPSq1evzJ49OxdddFGmTp2aH/3oR4UdFwAAQJvm/PBRo0Zl1KhRHzimqqoqNTU1a9z2/PPP584778xjjz2WPffcM0ly2WWX5cADD8y3v/3t1NbW5vrrr8+yZcty1VVXpbKyMrvuumvmzJmTiy++uEmUAQAArE8b/T1b9913X7p165addtopJ598cv7yl7+Ut82aNSudO3cuh1aSDB8+PK1atcojjzxSHrPffvulsrKyPGbkyJGZO3du3nzzzTV+5tKlS1NfX9/kBQAAsDY26tg64IAD8rOf/Sz33HNPvvWtb+X+++/PqFGjsnLlyiRJXV1dunXr1uQ9bdq0SZcuXVJXV1ce07179yZjVi2vGvP3pk2blurq6vKrZ8+e6/vQAACATVyzXkb4YQ4//PDyz/369Uv//v3Tp0+f3Hfffdl///0L+9zJkydn0qRJ5eX6+nrBBQAArJWN+szW3/vEJz6RrbfeOi+99FKSpKamJosWLWoyZsWKFXnjjTfK93nV1NRk4cKFTcasWn6/e8GqqqrSqVOnJi8AAIC10aJi63/+53/yl7/8JT169EiSDBkyJG+99VZmz55dHnPvvfemsbExgwcPLo954IEHsnz58vKYmTNnZqeddspWW221YQ8AAADYbDRrbC1ZsiRz5szJnDlzkiTz5s3LnDlzMn/+/CxZsiRnnHFGHn744bzyyiu55557cvDBB2eHHXbIyJEjkyS77LJLDjjggJx44ol59NFH8/vf/z4TJ07M4Ycfntra2iTJkUcemcrKyowbNy7PPvtsbrrpplx66aVNLhMEAABY35o1th5//PHsvvvu2X333ZMkkyZNyu67754pU6akdevWeeqpp/LFL34xO+64Y8aNG5dBgwblwQcfTFVVVXkf119/fXbeeefsv//+OfDAA7PPPvs0+Rta1dXVmTFjRubNm5dBgwblq1/9aqZMmeKx7wAAQKGa9QEZQ4cOTalUet/td91114fuo0uXLrnhhhs+cEz//v3z4IMPrvX8AAAA1lWLumcLAACgpRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABRBbAAAABWjW2HrggQdy0EEHpba2NhUVFZk+fXp52/Lly3PmmWemX79+6dChQ2pra3Psscfmtddea7KP7bffPhUVFU1eF1xwQZMxTz31VPbdd9+0bds2PXv2zIUXXrghDg8AANiMNWtsNTQ0ZMCAAbn88stX2/bXv/41TzzxRL7xjW/kiSeeyC233JK5c+fmi1/84mpjzzvvvCxYsKD8OuWUU8rb6uvrM2LEiPTq1SuzZ8/ORRddlKlTp+ZHP/pRoccGAABs3to054ePGjUqo0aNWuO26urqzJw5s8m673//+9l7770zf/78bLfdduX1HTt2TE1NzRr3c/3112fZsmW56qqrUllZmV133TVz5szJxRdfnPHjx6+/gwEAAHiPFnXP1uLFi1NRUZHOnTs3WX/BBReka9eu2X333XPRRRdlxYoV5W2zZs3Kfvvtl8rKyvK6kSNHZu7cuXnzzTfX+DlLly5NfX19kxcAAMDaaNYzW2vj3XffzZlnnpkjjjginTp1Kq8/9dRTs8cee6RLly556KGHMnny5CxYsCAXX3xxkqSuri69e/dusq/u3buXt2211Varfda0adNy7rnnFng0AADApq5FxNby5cvzz//8zymVSrniiiuabJs0aVL55/79+6eysjInnXRSpk2blqqqqnX6vMmTJzfZb319fXr27LlukwcAADZLG31srQqtP/3pT7n33nubnNVak8GDB2fFihV55ZVXstNOO6WmpiYLFy5sMmbV8vvd51VVVbXOoQYAAJBs5PdsrQqtF198MXfffXe6du36oe+ZM2dOWrVqlW7duiVJhgwZkgceeCDLly8vj5k5c2Z22mmnNV5CCAAAsD4065mtJUuW5KWXXiovz5s3L3PmzEmXLl3So0ePfOlLX8oTTzyR22+/PStXrkxdXV2SpEuXLqmsrMysWbPyyCOPZNiwYenYsWNmzZqV008/PUcffXQ5pI488sice+65GTduXM4888w888wzufTSS/Pd7363WY4ZAADYPDRrbD3++OMZNmxYeXnVfVJjxozJ1KlT81//9V9JkoEDBzZ53+9+97sMHTo0VVVVufHGGzN16tQsXbo0vXv3zumnn97kfqvq6urMmDEjEyZMyKBBg7L11ltnypQpHvsOAAAUqllja+jQoSmVSu+7/YO2Jckee+yRhx9++EM/p3///nnwwQfXen4AAADraqO+ZwsAAKClElsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAF+FixtWzZssydOzcrVqxYX/MBAADYJKxTbP31r3/NuHHj0r59++y6666ZP39+kuSUU07JBRdcsF4nCAAA0BKtU2xNnjw5Tz75ZO677760bdu2vH748OG56aab1tvkAAAAWqo26/Km6dOn56abbsqnPvWpVFRUlNfvuuuuefnll9fb5AAAAFqqdTqz9frrr6dbt26rrW9oaGgSXwAAAJurdYqtPffcM3fccUd5eVVg/eQnP8mQIUPWz8wAAABasHW6jPD888/PqFGj8txzz2XFihW59NJL89xzz+Whhx7K/fffv77nCAAA0OKs05mtffbZJ3PmzMmKFSvSr1+/zJgxI926dcusWbMyaNCg9T1HAACAFmedzmwlSZ8+ffLjH/94fc4FAABgk7FOZ7Z+85vf5K677lpt/V133ZXf/va3H3tSAAAALd06xdZZZ52VlStXrra+VCrlrLPO+tiTAgAAaOnWKbZefPHF9O3bd7X1O++8c1566aWPPSkAAICWbp1iq7q6On/84x9XW//SSy+lQ4cOH3tSAAAALd06xdbBBx+c0047LS+//HJ53UsvvZSvfvWr+eIXv7jeJgcAANBSrVNsXXjhhenQoUN23nnn9O7dO717984uu+ySrl275tvf/vb6niMAAECLs06Pfq+urs5DDz2UmTNn5sknn0y7du3Sv3//7Lfffut7fgAAAC3SOp3ZSpKKioqMGDEiZ5xxRiZOnLhOofXAAw/koIMOSm1tbSoqKjJ9+vQm20ulUqZMmZIePXqkXbt2GT58eF588cUmY954440cddRR6dSpUzp37pxx48ZlyZIlTcY89dRT2XfffdO2bdv07NkzF1544VrPFQAAYG185DNb3/ve9zJ+/Pi0bds23/ve9z5w7KmnnvqR9tnQ0JABAwbk+OOPz6GHHrra9gsvvDDf+973cu2116Z37975xje+kZEjR+a5555L27ZtkyRHHXVUFixYkJkzZ2b58uU57rjjMn78+Nxwww1Jkvr6+owYMSLDhw/PD3/4wzz99NM5/vjj07lz54wfP/6jHj4AAMBa+cix9d3vfjdHHXVU2rZtm+9+97vvO66iouIjx9aoUaMyatSoNW4rlUq55JJLcvbZZ+fggw9OkvzsZz9L9+7dM3369Bx++OF5/vnnc+edd+axxx7LnnvumSS57LLLcuCBB+bb3/52amtrc/3112fZsmW56qqrUllZmV133TVz5szJxRdf/L6xtXTp0ixdurS8XF9f/5GOBwAAYJWPfBnhvHnz0rVr1/LP7/da0yPh18W8efNSV1eX4cOHl9dVV1dn8ODBmTVrVpJk1qxZ6dy5czm0kmT48OFp1apVHnnkkfKY/fbbL5WVleUxI0eOzNy5c/Pmm2+u8bOnTZuW6urq8qtnz57r5ZgAAIDNx1rfs7V8+fL06dMnzz//fBHzKaurq0uSdO/evcn67t27l7fV1dWlW7duTba3adMmXbp0aTJmTft472f8vcmTJ2fx4sXl16uvvvrxDwgAANisrPXTCLfYYou8++67Rcxlo1FVVZWqqqrmngYAANCCrdPTCCdMmJBvfetbWbFixfqeT1lNTU2SZOHChU3WL1y4sLytpqYmixYtarJ9xYoVeeONN5qMWdM+3vsZAAAA69s6/Z2txx57LPfcc09mzJiRfv36pUOHDk2233LLLR97Yr17905NTU3uueeeDBw4MMnfHlTxyCOP5OSTT06SDBkyJG+99VZmz56dQYMGJUnuvffeNDY2ZvDgweUxX//617N8+fJsscUWSZKZM2dmp512ylZbbfWx5wkAALAm6xRbnTt3zmGHHfaxP3zJkiV56aWXysvz5s3LnDlz0qVLl2y33XY57bTT8h//8R/55Cc/WX70e21tbQ455JAkyS677JIDDjggJ554Yn74wx9m+fLlmThxYg4//PDU1tYmSY488sice+65GTduXM4888w888wzufTSSz/wiYoAAAAf11rFVmNjYy666KL84Q9/yLJly/K5z30uU6dOTbt27dbpwx9//PEMGzasvDxp0qQkyZgxY3LNNdfka1/7WhoaGjJ+/Pi89dZb2WeffXLnnXeW/8ZWklx//fWZOHFi9t9//7Rq1SqHHXZYk78DVl1dnRkzZmTChAkZNGhQtt5660yZMsXf2AIAAAq1VrH1n//5n5k6dWqGDx+edu3a5Xvf+15ef/31XHXVVev04UOHDk2pVHrf7RUVFTnvvPNy3nnnve+YLl26lP+A8fvp379/HnzwwXWaIwAAwLpYqwdk/OxnP8sPfvCD3HXXXZk+fXp+/etf5/rrr09jY2NR8wMAAGiR1iq25s+fnwMPPLC8PHz48FRUVOS1115b7xMDAABoydYqtlasWNHkfqnkb393a/ny5et1UgAAAC3dWt2zVSqVMnbs2CZ/8Pfdd9/NV77ylSaPf18fj34HAABoydYqtsaMGbPauqOPPnq9TQYAAGBTsVaxdfXVVxc1DwAAgE3KWt2zBQAAwEcjtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAqw0cfW9ttvn4qKitVeEyZMSJIMHTp0tW1f+cpXmuxj/vz5GT16dNq3b59u3brljDPOyIoVK5rjcAAAgM1Em+aewId57LHHsnLlyvLyM888k89//vP5p3/6p/K6E088Meedd155uX379uWfV65cmdGjR6empiYPPfRQFixYkGOPPTZbbLFFzj///A1zEAAAwGZno4+tbbbZpsnyBRdckD59+uSzn/1seV379u1TU1OzxvfPmDEjzz33XO6+++507949AwcOzDe/+c2ceeaZmTp1aiorKwudPwAAsHna6C8jfK9ly5bluuuuy/HHH5+Kiory+uuvvz5bb711dtttt0yePDl//etfy9tmzZqVfv36pXv37uV1I0eOTH19fZ599tk1fs7SpUtTX1/f5AUAALA2NvozW+81ffr0vPXWWxk7dmx53ZFHHplevXqltrY2Tz31VM4888zMnTs3t9xyS5Kkrq6uSWglKS/X1dWt8XOmTZuWc889t5iDAAAANgstKrZ++tOfZtSoUamtrS2vGz9+fPnnfv36pUePHtl///3z8ssvp0+fPuv0OZMnT86kSZPKy/X19enZs+e6TxwAANjstJjY+tOf/pS77767fMbq/QwePDhJ8tJLL6VPnz6pqanJo48+2mTMwoULk+R97/OqqqpKVVXVepg1AACwuWox92xdffXV6datW0aPHv2B4+bMmZMk6dGjR5JkyJAhefrpp7No0aLymJkzZ6ZTp07p27dvYfMFAAA2by3izFZjY2OuvvrqjBkzJm3a/O+UX3755dxwww058MAD07Vr1zz11FM5/fTTs99++6V///5JkhEjRqRv37455phjcuGFF6auri5nn312JkyY4OwVAABQmBYRW3fffXfmz5+f448/vsn6ysrK3H333bnkkkvS0NCQnj175rDDDsvZZ59dHtO6devcfvvtOfnkkzNkyJB06NAhY8aMafJ3uQAAANa3FhFbI0aMSKlUWm19z549c//993/o+3v16pXf/OY3RUwNAABgjVrMPVsAAAAtidgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAogNgCAAAowEYdW1OnTk1FRUWT184771ze/u6772bChAnp2rVrttxyyxx22GFZuHBhk33Mnz8/o0ePTvv27dOtW7ecccYZWbFixYY+FAAAYDPTprkn8GF23XXX3H333eXlNm3+d8qnn3567rjjjtx8882prq7OxIkTc+ihh+b3v/99kmTlypUZPXp0ampq8tBDD2XBggU59thjs8UWW+T888/f4McCAABsPjb62GrTpk1qampWW7948eL89Kc/zQ033JDPfe5zSZKrr746u+yySx5++OF86lOfyowZM/Lcc8/l7rvvTvfu3TNw4MB885vfzJlnnpmpU6emsrJyQx8OAACwmdioLyNMkhdffDG1tbX5xCc+kaOOOirz589PksyePTvLly/P8OHDy2N33nnnbLfddpk1a1aSZNasWenXr1+6d+9eHjNy5MjU19fn2Weffd/PXLp0aerr65u8AAAA1sZGHVuDBw/ONddckzvvvDNXXHFF5s2bl3333Tdvv/126urqUllZmc6dOzd5T/fu3VNXV5ckqauraxJaq7av2vZ+pk2blurq6vKrZ8+e6/fAAACATd5GfRnhqFGjyj/3798/gwcPTq9evfLLX/4y7dq1K+xzJ0+enEmTJpWX6+vrBRcAALBWNuozW3+vc+fO2XHHHfPSSy+lpqYmy5Yty1tvvdVkzMKFC8v3eNXU1Kz2dMJVy2u6D2yVqqqqdOrUqckLAABgbbSo2FqyZElefvnl9OjRI4MGDcoWW2yRe+65p7x97ty5mT9/foYMGZIkGTJkSJ5++uksWrSoPGbmzJnp1KlT+vbtu8HnDwAAbD426ssI/+3f/i0HHXRQevXqlddeey3nnHNOWrdunSOOOCLV1dUZN25cJk2alC5duqRTp0455ZRTMmTIkHzqU59KkowYMSJ9+/bNMccckwsvvDB1dXU5++yzM2HChFRVVTXz0QEAAJuyjTq2/ud//idHHHFE/vKXv2SbbbbJPvvsk4cffjjbbLNNkuS73/1uWrVqlcMOOyxLly7NyJEj84Mf/KD8/tatW+f222/PySefnCFDhqRDhw4ZM2ZMzjvvvOY6JAAAYDOxUcfWjTfe+IHb27Ztm8svvzyXX375+47p1atXfvOb36zvqQEAAHygFnXPFgAAQEshtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAogtgAAAAqwUcfWtGnTstdee6Vjx47p1q1bDjnkkMydO7fJmKFDh6aioqLJ6ytf+UqTMfPnz8/o0aPTvn37dOvWLWeccUZWrFixIQ8FAADYzLRp7gl8kPvvvz8TJkzIXnvtlRUrVuTf//3fM2LEiDz33HPp0KFDedyJJ56Y8847r7zcvn378s8rV67M6NGjU1NTk4ceeigLFizIsccemy222CLnn3/+Bj0eAABg87FRx9add97ZZPmaa65Jt27dMnv27Oy3337l9e3bt09NTc0a9zFjxow899xzufvuu9O9e/cMHDgw3/zmN3PmmWdm6tSpqaysLPQYAACAzdNGfRnh31u8eHGSpEuXLk3WX3/99dl6662z2267ZfLkyfnrX/9a3jZr1qz069cv3bt3L68bOXJk6uvr8+yzz67xc5YuXZr6+vomLwAAgLWxUZ/Zeq/Gxsacdtpp+cxnPpPddtutvP7II49Mr169Ultbm6eeeipnnnlm5s6dm1tuuSVJUldX1yS0kpSX6+rq1vhZ06ZNy7nnnlvQkQAAAJuDFhNbEyZMyDPPPJP//u//brJ+/Pjx5Z/79euXHj16ZP/998/LL7+cPn36rNNnTZ48OZMmTSov19fXp2fPnus2cQAAYLPUIi4jnDhxYm6//fb87ne/y7bbbvuBYwcPHpwkeemll5IkNTU1WbhwYZMxq5bf7z6vqqqqdOrUqckLAABgbWzUsVUqlTJx4sTceuutuffee9O7d+8Pfc+cOXOSJD169EiSDBkyJE8//XQWLVpUHjNz5sx06tQpffv2LWTeAAAAG/VlhBMmTMgNN9yQ2267LR07dizfY1VdXZ127drl5Zdfzg033JADDzwwXbt2zVNPPZXTTz89++23X/r3758kGTFiRPr27ZtjjjkmF154Yerq6nL22WdnwoQJqaqqas7DAwAANmEb9ZmtK664IosXL87QoUPTo0eP8uumm25KklRWVubuu+/OiBEjsvPOO+erX/1qDjvssPz6178u76N169a5/fbb07p16wwZMiRHH310jj322CZ/lwsAAGB926jPbJVKpQ/c3rNnz9x///0fup9evXrlN7/5zfqaFgAAwIfaqM9sAQAAtFRiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoABiCwAAoACbVWxdfvnl2X777dO2bdsMHjw4jz76aHNPCQAA2ERtNrF10003ZdKkSTnnnHPyxBNPZMCAARk5cmQWLVrU3FMDAAA2QZtNbF188cU58cQTc9xxx6Vv37754Q9/mPbt2+eqq65q7qkBAACboDbNPYENYdmyZZk9e3YmT55cXteqVasMHz48s2bNWm380qVLs3Tp0vLy4sWLkyT19fXrPIfS0tI6v5eW5+N8Vz4u37XNi+8aG4rvGhuK7xobyrp+11a9r1T68O/LZhFbf/7zn7Ny5cp07969yfru3bvnhRdeWG38tGnTcu655662vmfPnoXNkU1L9RXVzT0FNhO+a2wovmtsKL5rbCgf97v29ttvp7r6g/exWcTW2po8eXImTZpUXm5sbMwbb7yRrl27pqKiohln1rLU19enZ8+eefXVV9OpU6fmng6bMN81NhTfNTYU3zU2FN+1tVcqlfL222+ntrb2Q8duFrG19dZbp3Xr1lm4cGGT9QsXLkxNTc1q46uqqlJVVdVkXefOnYuc4iatU6dO/oeXDcJ3jQ3Fd40NxXeNDcV3be182BmtVTaLB2RUVlZm0KBBueeee8rrGhsbc88992TIkCHNODMAAGBTtVmc2UqSSZMmZcyYMdlzzz2z995755JLLklDQ0OOO+645p4aAACwCdpsYuvLX/5yXn/99UyZMiV1dXUZOHBg7rzzztUemsH6U1VVlXPOOWe1SzJhffNdY0PxXWND8V1jQ/FdK1ZF6aM8sxAAAIC1slncswUAALChiS0AAIACiC0AAIACiC0AAIACiC0Kcfnll2f77bdP27ZtM3jw4Dz66KPNPSU2QQ888EAOOuig1NbWpqKiItOnT2/uKbGJmjZtWvbaa6907Ngx3bp1yyGHHJK5c+c297TYBF1xxRXp379/+Q/MDhkyJL/97W+be1ps4i644IJUVFTktNNOa+6pbHLEFuvdTTfdlEmTJuWcc87JE088kQEDBmTkyJFZtGhRc0+NTUxDQ0MGDBiQyy+/vLmnwibu/vvvz4QJE/Lwww9n5syZWb58eUaMGJGGhobmnhqbmG233TYXXHBBZs+enccffzyf+9zncvDBB+fZZ59t7qmxiXrsscdy5ZVXpn///s09lU2SR7+z3g0ePDh77bVXvv/97ydJGhsb07Nnz5xyyik566yzmnl2bKoqKipy66235pBDDmnuqbAZeP3119OtW7fcf//92W+//Zp7OmziunTpkosuuijjxo1r7qmwiVmyZEn22GOP/OAHP8h//Md/ZODAgbnkkkuae1qbFGe2WK+WLVuW2bNnZ/jw4eV1rVq1yvDhwzNr1qxmnBnA+rN48eIkf/tHMBRl5cqVufHGG9PQ0JAhQ4Y093TYBE2YMCGjR49u8u821q82zT0BNi1//vOfs3LlynTv3r3J+u7du+eFF15oplkBrD+NjY057bTT8pnPfCa77bZbc0+HTdDTTz+dIUOG5N13382WW26ZW2+9NX379m3uabGJufHGG/PEE0/ksccea+6pbNLEFgCshQkTJuSZZ57Jf//3fzf3VNhE7bTTTpkzZ04WL16cX/3qVxkzZkzuv/9+wcV68+qrr+Zf//VfM3PmzLRt27a5p7NJE1usV1tvvXVat26dhQsXNlm/cOHC1NTUNNOsANaPiRMn5vbbb88DDzyQbbfdtrmnwyaqsrIyO+ywQ5Jk0KBBeeyxx3LppZfmyiuvbOaZsamYPXt2Fi1alD322KO8buXKlXnggQfy/e9/P0uXLk3r1q2bcYabDvdssV5VVlZm0KBBueeee8rrGhsbc88997jeHGixSqVSJk6cmFtvvTX33ntvevfu3dxTYjPS2NiYpUuXNvc02ITsv//+efrppzNnzpzya88998xRRx2VOXPmCK31yJkt1rtJkyZlzJgx2XPPPbP33nvnkksuSUNDQ4477rjmnhqbmCVLluSll14qL8+bNy9z5sxJly5dst122zXjzNjUTJgwITfccENuu+22dOzYMXV1dUmS6urqtGvXrplnx6Zk8uTJGTVqVLbbbru8/fbbueGGG3Lfffflrrvuau6psQnp2LHjavecdujQIV27dnUv6nomtljvvvzlL+f111/PlClTUldXl4EDB+bOO+9c7aEZ8HE9/vjjGTZsWHl50qRJSZIxY8bkmmuuaaZZsSm64oorkiRDhw5tsv7qq6/O2LFjN/yE2GQtWrQoxx57bBYsWJDq6ur0798/d911Vz7/+c8399SAdeDvbAEAABTAPVsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAAAAFEFsAsIFVVFRk+vTpzT0NAAomtgDYpI0dOzYVFRXlV9euXXPAAQfkqaeeau6pAbCJE1sAbPIOOOCALFiwIAsWLMg999yTNm3a5Atf+ML7jl++fPkGnB0AmyqxBcAmr6qqKjU1NampqcnAgQNz1lln5dVXX83rr7+eV155JRUVFbnpppvy2c9+Nm3bts3111+fv/zlLzniiCPyD//wD2nfvn369euXX/ziF032O3To0Jx66qn52te+li5duqSmpiZTp05tMubFF1/Mfvvtl7Zt26Zv376ZOXPmBjxyAJpTm+aeAABsSEuWLMl1112XHXbYIV27dk1DQ0OS5Kyzzsp3vvOd7L777mnbtm3efffdDBo0KGeeeWY6deqUO+64I8ccc0z69OmTvffeu7y/a6+9NpMmTcojjzySWbNmZezYsfnMZz6Tz3/+82lsbMyhhx6a7t2755FHHsnixYtz2mmnNdORA7ChiS0ANnm33357ttxyyyRJQ0NDevTokdtvvz2tWv3vBR6nnXZaDj300Cbv+7d/+7fyz6ecckruuuuu/PKXv2wSW/37988555yTJPnkJz+Z73//+7nnnnvy+c9/PnfffXdeeOGF3HXXXamtrU2SnH/++Rk1alRhxwrAxkNsAbDJGzZsWK644ookyZtvvpkf/OAHGTVqVB599NHymD333LPJe1auXJnzzz8/v/zlL/P//t//y7Jly7J06dK0b9++ybj+/fs3We7Ro0cWLVqUJHn++efTs2fPcmglyZAhQ9brsQGw8RJbAGzyOnTokB122KG8/JOf/CTV1dX58Y9/nBNOOKE85r0uuuiiXHrppbnkkkvSr1+/dOjQIaeddlqWLVvWZNwWW2zRZLmioiKNjY0FHQkALYnYAmCzU1FRkVatWuWdd9553zG///3vc/DBB+foo49OkjQ2NuYPf/hD+vbt+5E/Z5dddsmrr76aBQsWpEePHkmShx9++ONNHoAWw9MIAdjkLV26NHV1damrq8vzzz+fU045JUuWLMlBBx30vu/55Cc/mZkzZ+ahhx7K888/n5NOOikLFy5cq88dPnx4dtxxx4wZMyZPPvlkHnzwwXz961//uIcDQAshtgDY5N15553p0aNHevTokcGDB+exxx7LzTffnKFDh77ve84+++zsscceGTlyZIYOHZqampoccsgha/W5rVq1yq233pp33nkne++9d0444YT853/+58c7GABajIpSqVRq7kkAAABsapzZAgAAKIDYAgAAKIDYAgAAKIDYAgAAKIDYAgAAKIDYAgAAKIDYAgAAKIDYAgAAKIDYAgAAKIDYAgAAKIDYAgAAKMD/BwWtIQWYvNBGAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "x = data.drop('Price ($)', axis=1)\n",
        "y = data['Price ($)']\n",
        "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "KpQ1Q2LgSWtr"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "09YMRMqfSxn0",
        "outputId": "4461a731-8fe0-464b-c8f0-ea361f98e3e7"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Brand  Processor Type  RAM Size (GB)  Storage (GB)  Screen Size (inches)  \\\n",
              "29       0               1      -0.653598     -1.023895             -0.698031   \n",
              "535      4               0      -0.653598      1.515887              1.413918   \n",
              "695      0               0       0.083266      1.515887              0.325944   \n",
              "557      1               3       1.556992      1.515887             -0.698031   \n",
              "836      1               1       1.556992     -0.661069             -0.698031   \n",
              "..     ...             ...            ...           ...                   ...   \n",
              "106      4               0       0.083266      0.064583             -1.146020   \n",
              "270      4               0       0.083266     -1.023895              1.413918   \n",
              "860      1               3       1.556992     -0.661069             -1.146020   \n",
              "435      0               2       1.556992      1.515887              1.413918   \n",
              "102      4               3      -1.022029      0.064583              1.413918   \n",
              "\n",
              "     Operating System  \n",
              "29                  1  \n",
              "535                 0  \n",
              "695                 2  \n",
              "557                 0  \n",
              "836                 0  \n",
              "..                ...  \n",
              "106                 1  \n",
              "270                 2  \n",
              "860                 2  \n",
              "435                 0  \n",
              "102                 1  \n",
              "\n",
              "[800 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bbfb4667-8a9f-4ff3-95af-9b9d4b57b2ec\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Brand</th>\n",
              "      <th>Processor Type</th>\n",
              "      <th>RAM Size (GB)</th>\n",
              "      <th>Storage (GB)</th>\n",
              "      <th>Screen Size (inches)</th>\n",
              "      <th>Operating System</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>-0.653598</td>\n",
              "      <td>-1.023895</td>\n",
              "      <td>-0.698031</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>535</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.653598</td>\n",
              "      <td>1.515887</td>\n",
              "      <td>1.413918</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>695</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.083266</td>\n",
              "      <td>1.515887</td>\n",
              "      <td>0.325944</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>557</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1.556992</td>\n",
              "      <td>1.515887</td>\n",
              "      <td>-0.698031</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>836</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.556992</td>\n",
              "      <td>-0.661069</td>\n",
              "      <td>-0.698031</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0.083266</td>\n",
              "      <td>0.064583</td>\n",
              "      <td>-1.146020</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270</th>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0.083266</td>\n",
              "      <td>-1.023895</td>\n",
              "      <td>1.413918</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>860</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1.556992</td>\n",
              "      <td>-0.661069</td>\n",
              "      <td>-1.146020</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>435</th>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1.556992</td>\n",
              "      <td>1.515887</td>\n",
              "      <td>1.413918</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>-1.022029</td>\n",
              "      <td>0.064583</td>\n",
              "      <td>1.413918</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>800 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bbfb4667-8a9f-4ff3-95af-9b9d4b57b2ec')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-bbfb4667-8a9f-4ff3-95af-9b9d4b57b2ec button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-bbfb4667-8a9f-4ff3-95af-9b9d4b57b2ec');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2edd64d0-6607-444e-be56-fff296c7eff1\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2edd64d0-6607-444e-be56-fff296c7eff1')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2edd64d0-6607-444e-be56-fff296c7eff1 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_d18ef074-98c4-47e8-b58d-738ed56b1d04\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('x_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d18ef074-98c4-47e8-b58d-738ed56b1d04 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('x_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "x_train",
              "summary": "{\n  \"name\": \"x_train\",\n  \"rows\": 800,\n  \"fields\": [\n    {\n      \"column\": \"Brand\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 4,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          4,\n          3,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Processor Type\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0,\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RAM Size (GB)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0083632256783692,\n        \"min\": -1.0220293363434265,\n        \"max\": 1.5569920603414997,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.08326554795011333,\n          -1.0220293363434265,\n          -0.65359770824558\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Storage (GB)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9957907870689051,\n        \"min\": -1.0238951788433936,\n        \"max\": 1.51588733423377,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.51588733423377,\n          0.06458304104681928,\n          -1.0238951788433936\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Screen Size (inches)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.9977839437024246,\n        \"min\": -1.1460204788228503,\n        \"max\": 1.413918045380759,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.413918045380759,\n          -1.1460204788228503,\n          -0.6980312370872191\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Operating System\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "kuPwL8svSytV",
        "outputId": "fde87b95-c354-4993-81bd-354ac5ffc79d"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "29     2807.865134\n",
              "535    1181.476005\n",
              "695    1275.795790\n",
              "557     747.523015\n",
              "836    2774.574566\n",
              "          ...     \n",
              "106    2285.394987\n",
              "270    1981.674481\n",
              "860    1566.686975\n",
              "435    1351.000000\n",
              "102    2253.110885\n",
              "Name: Price ($), Length: 800, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Price ($)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>2807.865134</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>535</th>\n",
              "      <td>1181.476005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>695</th>\n",
              "      <td>1275.795790</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>557</th>\n",
              "      <td>747.523015</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>836</th>\n",
              "      <td>2774.574566</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>106</th>\n",
              "      <td>2285.394987</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>270</th>\n",
              "      <td>1981.674481</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>860</th>\n",
              "      <td>1566.686975</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>435</th>\n",
              "      <td>1351.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>102</th>\n",
              "      <td>2253.110885</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>800 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n"
      ],
      "metadata": {
        "id": "laOD9poyS2Lg"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lr = LinearRegression()\n",
        "lr.fit(x_train, y_train)\n",
        "dt = DecisionTreeRegressor()\n",
        "dt.fit(x_train, y_train)\n",
        "rf = RandomForestRegressor()\n",
        "rf.fit(x_train, y_train)\n",
        "y_pred_lr = lr.predict(x_test)\n",
        "y_pred_dt = dt.predict(x_test)\n",
        "y_pred_rf = rf.predict(x_test)\n"
      ],
      "metadata": {
        "id": "gMvm4GZnTGKn"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Linear Regression:\")\n",
        "print(\"Mean Squared Error:\", mean_squared_error(y_test, y_pred_lr))\n",
        "print(\"R-squared:\", r2_score(y_test, y_pred_lr))\n",
        "print(\"Mean Absolute Error:\", mean_absolute_error(y_test, y_pred_lr))\n",
        "\n",
        "print(\"Decision Tree Regression:\")\n",
        "print(\"Mean Squared Error:\", mean_squared_error(y_test, y_pred_dt))\n",
        "print(\"R-squared:\", r2_score(y_test, y_pred_dt))\n",
        "print(\"Mean Absolute Error:\", mean_absolute_error(y_test, y_pred_dt))\n",
        "\n",
        "print(\"Random Forest Regression:\")\n",
        "print(\"Mean Squared Error:\", mean_squared_error(y_test, y_pred_rf))\n",
        "print(\"R-squared:\", r2_score(y_test, y_pred_rf))\n",
        "print(\"Mean Absolute Error:\", mean_absolute_error(y_test, y_pred_rf))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ctPeq-VoTnJQ",
        "outputId": "42d7cc28-d004-444e-cbf8-568e9c0ee784"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Linear Regression:\n",
            "Mean Squared Error: 459090.8989545152\n",
            "R-squared: 0.05026750906647026\n",
            "Mean Absolute Error: 566.2744459316656\n",
            "Decision Tree Regression:\n",
            "Mean Squared Error: 574158.2116455722\n",
            "R-squared: -0.18777503491768366\n",
            "Mean Absolute Error: 502.8410628307085\n",
            "Random Forest Regression:\n",
            "Mean Squared Error: 379689.36189567775\n",
            "R-squared: 0.2145273969156346\n",
            "Mean Absolute Error: 464.2130240587683\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n",
        "random_params = {\n",
        "    'n_estimators': [50, 100, 200, 250,300],\n",
        "    'max_depth': [None, 10, 20, 30,35,40],\n",
        "\n",
        "}\n",
        "random_model = RandomizedSearchCV(RandomForestRegressor(), random_params, cv=5)\n",
        "random_model.fit(x_train, y_train)\n"
      ],
      "metadata": {
        "id": "7A1p3wnbT4VI"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Best Parameters:\", random_model.best_params_)\n",
        "print(\"Best Score:\", random_model.best_score_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JXPBwMqFUmfw",
        "outputId": "6c73834a-600d-47db-ebc3-298abfa95c10"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best Parameters: {'n_estimators': 300, 'max_depth': 10}\n",
            "Best Score: 0.3227072956323328\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install gradio"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S9hKkvaEVFmu",
        "outputId": "19c4b18a-b978-4f3b-98d7-d01e065bb37c"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting gradio\n",
            "  Downloading gradio-5.12.0-py3-none-any.whl.metadata (16 kB)\n",
            "Collecting aiofiles<24.0,>=22.0 (from gradio)\n",
            "  Downloading aiofiles-23.2.1-py3-none-any.whl.metadata (9.7 kB)\n",
            "Requirement already satisfied: anyio<5.0,>=3.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.7.1)\n",
            "Collecting fastapi<1.0,>=0.115.2 (from gradio)\n",
            "  Downloading fastapi-0.115.6-py3-none-any.whl.metadata (27 kB)\n",
            "Collecting ffmpy (from gradio)\n",
            "  Downloading ffmpy-0.5.0-py3-none-any.whl.metadata (3.0 kB)\n",
            "Collecting gradio-client==1.5.4 (from gradio)\n",
            "  Downloading gradio_client-1.5.4-py3-none-any.whl.metadata (7.1 kB)\n",
            "Requirement already satisfied: httpx>=0.24.1 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.28.1)\n",
            "Requirement already satisfied: huggingface-hub>=0.25.1 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.27.1)\n",
            "Requirement already satisfied: jinja2<4.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.1.5)\n",
            "Collecting markupsafe~=2.0 (from gradio)\n",
            "  Downloading MarkupSafe-2.1.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (3.0 kB)\n",
            "Requirement already satisfied: numpy<3.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (1.26.4)\n",
            "Requirement already satisfied: orjson~=3.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (3.10.13)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from gradio) (24.2)\n",
            "Requirement already satisfied: pandas<3.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.2.2)\n",
            "Requirement already satisfied: pillow<12.0,>=8.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (11.1.0)\n",
            "Requirement already satisfied: pydantic>=2.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (2.10.4)\n",
            "Collecting pydub (from gradio)\n",
            "  Downloading pydub-0.25.1-py2.py3-none-any.whl.metadata (1.4 kB)\n",
            "Collecting python-multipart>=0.0.18 (from gradio)\n",
            "  Downloading python_multipart-0.0.20-py3-none-any.whl.metadata (1.8 kB)\n",
            "Requirement already satisfied: pyyaml<7.0,>=5.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (6.0.2)\n",
            "Collecting ruff>=0.2.2 (from gradio)\n",
            "  Downloading ruff-0.9.1-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (25 kB)\n",
            "Collecting safehttpx<0.2.0,>=0.1.6 (from gradio)\n",
            "  Downloading safehttpx-0.1.6-py3-none-any.whl.metadata (4.2 kB)\n",
            "Collecting semantic-version~=2.0 (from gradio)\n",
            "  Downloading semantic_version-2.10.0-py2.py3-none-any.whl.metadata (9.7 kB)\n",
            "Collecting starlette<1.0,>=0.40.0 (from gradio)\n",
            "  Downloading starlette-0.45.2-py3-none-any.whl.metadata (6.3 kB)\n",
            "Collecting tomlkit<0.14.0,>=0.12.0 (from gradio)\n",
            "  Downloading tomlkit-0.13.2-py3-none-any.whl.metadata (2.7 kB)\n",
            "Requirement already satisfied: typer<1.0,>=0.12 in /usr/local/lib/python3.10/dist-packages (from gradio) (0.15.1)\n",
            "Requirement already satisfied: typing-extensions~=4.0 in /usr/local/lib/python3.10/dist-packages (from gradio) (4.12.2)\n",
            "Collecting uvicorn>=0.14.0 (from gradio)\n",
            "  Downloading uvicorn-0.34.0-py3-none-any.whl.metadata (6.5 kB)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.10/dist-packages (from gradio-client==1.5.4->gradio) (2024.10.0)\n",
            "Requirement already satisfied: websockets<15.0,>=10.0 in /usr/local/lib/python3.10/dist-packages (from gradio-client==1.5.4->gradio) (14.1)\n",
            "Requirement already satisfied: idna>=2.8 in /usr/local/lib/python3.10/dist-packages (from anyio<5.0,>=3.0->gradio) (3.10)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio<5.0,>=3.0->gradio) (1.3.1)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio<5.0,>=3.0->gradio) (1.2.2)\n",
            "Collecting starlette<1.0,>=0.40.0 (from gradio)\n",
            "  Downloading starlette-0.41.3-py3-none-any.whl.metadata (6.0 kB)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx>=0.24.1->gradio) (2024.12.14)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx>=0.24.1->gradio) (1.0.7)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx>=0.24.1->gradio) (0.14.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.25.1->gradio) (3.16.1)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.25.1->gradio) (2.32.3)\n",
            "Requirement already satisfied: tqdm>=4.42.1 in /usr/local/lib/python3.10/dist-packages (from huggingface-hub>=0.25.1->gradio) (4.67.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas<3.0,>=1.0->gradio) (2024.2)\n",
            "Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.0->gradio) (0.7.0)\n",
            "Requirement already satisfied: pydantic-core==2.27.2 in /usr/local/lib/python3.10/dist-packages (from pydantic>=2.0->gradio) (2.27.2)\n",
            "Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (8.1.8)\n",
            "Requirement already satisfied: shellingham>=1.3.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (1.5.4)\n",
            "Requirement already satisfied: rich>=10.11.0 in /usr/local/lib/python3.10/dist-packages (from typer<1.0,>=0.12->gradio) (13.9.4)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas<3.0,>=1.0->gradio) (1.17.0)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.10/dist-packages (from rich>=10.11.0->typer<1.0,>=0.12->gradio) (2.18.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.25.1->gradio) (3.4.1)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->huggingface-hub>=0.25.1->gradio) (2.3.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.10/dist-packages (from markdown-it-py>=2.2.0->rich>=10.11.0->typer<1.0,>=0.12->gradio) (0.1.2)\n",
            "Downloading gradio-5.12.0-py3-none-any.whl (57.6 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m57.6/57.6 MB\u001b[0m \u001b[31m10.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading gradio_client-1.5.4-py3-none-any.whl (321 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m321.4/321.4 kB\u001b[0m \u001b[31m17.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading aiofiles-23.2.1-py3-none-any.whl (15 kB)\n",
            "Downloading fastapi-0.115.6-py3-none-any.whl (94 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m94.8/94.8 kB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading MarkupSafe-2.1.5-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (25 kB)\n",
            "Downloading python_multipart-0.0.20-py3-none-any.whl (24 kB)\n",
            "Downloading ruff-0.9.1-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (11.3 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m11.3/11.3 MB\u001b[0m \u001b[31m54.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading safehttpx-0.1.6-py3-none-any.whl (8.7 kB)\n",
            "Downloading semantic_version-2.10.0-py2.py3-none-any.whl (15 kB)\n",
            "Downloading starlette-0.41.3-py3-none-any.whl (73 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m73.2/73.2 kB\u001b[0m \u001b[31m5.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading tomlkit-0.13.2-py3-none-any.whl (37 kB)\n",
            "Downloading uvicorn-0.34.0-py3-none-any.whl (62 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.3/62.3 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading ffmpy-0.5.0-py3-none-any.whl (6.0 kB)\n",
            "Downloading pydub-0.25.1-py2.py3-none-any.whl (32 kB)\n",
            "Installing collected packages: pydub, uvicorn, tomlkit, semantic-version, ruff, python-multipart, markupsafe, ffmpy, aiofiles, starlette, safehttpx, gradio-client, fastapi, gradio\n",
            "  Attempting uninstall: markupsafe\n",
            "    Found existing installation: MarkupSafe 3.0.2\n",
            "    Uninstalling MarkupSafe-3.0.2:\n",
            "      Successfully uninstalled MarkupSafe-3.0.2\n",
            "Successfully installed aiofiles-23.2.1 fastapi-0.115.6 ffmpy-0.5.0 gradio-5.12.0 gradio-client-1.5.4 markupsafe-2.1.5 pydub-0.25.1 python-multipart-0.0.20 ruff-0.9.1 safehttpx-0.1.6 semantic-version-2.10.0 starlette-0.41.3 tomlkit-0.13.2 uvicorn-0.34.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import gradio as gr\n",
        "def predict_laptop_price(brand, processor_type, ram_size, storage, screen, os):\n",
        "  try:\n",
        "    input_data = pd.DataFrame(\n",
        "        {\n",
        "            'Brand': [brand],\n",
        "            'Processor Type': [processor_type],\n",
        "            'RAM Size (GB)': [ram_size],\n",
        "            'Storage (GB)': [storage],\n",
        "            'Screen Size (inches)': [screen],\n",
        "            'Operating System': [os]\n",
        "\n",
        "        }\n",
        "    )\n",
        "\n",
        "    for col in encode_cols:\n",
        "      input_data[col] = le[col].transform(input_data[col])\n",
        "    input_data[scale_Cols] = scaler.transform(input_data[scale_Cols])\n",
        "    prediction = random_model.best_estimator_.predict(input_data)\n",
        "    return prediction[0]\n",
        "  except Exception as e:\n",
        "    return str(e)\n",
        "gr.Interface(\n",
        "      inputs=[\n",
        "          gr.Dropdown(choices=list(data['Brand'].unique()), label='Brand'),\n",
        "          gr.Dropdown(choices=list(data['Processor Type'].unique()), label='Processor Type'),\n",
        "          gr.Number(label='RAM Size (GB)'),\n",
        "          gr.Number(label='Storage (GB)'),\n",
        "          gr.Number(label='Screen Size (inches)'),\n",
        "          gr.Dropdown(choices=list(data['Operating System'].unique()), label='Operating System')\n",
        "      ]\n",
        "      , outputs=gr.Textbox(label='Predicted Price ($)'),\n",
        "      fn=predict_laptop_price,\n",
        "      title='Laptop Price Prediction',\n",
        "      description='Enter the details of the laptop to predict its price.'\n",
        "  ).launch()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 650
        },
        "id": "jpJpirYlVWy7",
        "outputId": "f4e37095-e808-4e7b-b7e0-89b9ea5e4b9a"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Running Gradio in a Colab notebook requires sharing enabled. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n",
            "\n",
            "Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n",
            "* Running on public URL: https://780f9f0b14c28fdedf.gradio.live\n",
            "\n",
            "This share link expires in 72 hours. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div><iframe src=\"https://780f9f0b14c28fdedf.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": []
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['Brand'].unique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AIIxRhOIW6I1",
        "outputId": "6f8b4479-0efa-4bbe-c8dc-8d67f38aab39"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Acer', 'Apple', 'HP', 'Lenovo', 'Dell'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "z9YuibvUW6h0"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}